# Ultra-optimized multi-stage build for Zeek with comprehensive plugins
# Use: docker build --build-arg BUILDKIT_INLINE_CACHE=1 -f Dockerfile.ultra-optimized .

# syntax=docker/dockerfile:1.4
FROM ubuntu:22.04 AS builder

# Set environment variables for optimization
ENV ZEEK_VERSION=6.0.0
ENV DEBIAN_FRONTEND=noninteractive
ENV MAKEFLAGS="-j$(nproc)"
ENV CCACHE_DIR=/ccache
ENV CCACHE_MAXSIZE=2G

# Install build dependencies with minimal packages
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    git \
    wget \
    curl \
    ccache \
    libpcap-dev \
    libssl-dev \
    python3 \
    python3-dev \
    python3-pip \
    swig \
    bison \
    flex \
    libmaxminddb-dev \
    libcurl4-openssl-dev \
    libgeoip-dev \
    libnetfilter-queue-dev \
    libnfnetlink-dev \
    libpcre3-dev \
    libsnappy-dev \
    libzstd-dev \
    libbz2-dev \
    liblz4-dev \
    libjemalloc-dev \
    libunwind-dev \
    libgoogle-perftools-dev \
    libgtest-dev \
    libbenchmark-dev \
    && rm -rf /var/lib/apt/lists/*

# Create zeek user
RUN useradd -m -s /bin/bash zeek

# Setup ccache for faster rebuilds
RUN --mount=type=cache,target=/ccache \
    mkdir -p /ccache && chown zeek:zeek /ccache

# Download and build Zeek with caching
WORKDIR /tmp
RUN --mount=type=cache,target=/ccache \
    wget -q https://github.com/zeek/zeek/releases/download/v${ZEEK_VERSION}/zeek-${ZEEK_VERSION}.tar.gz \
    && tar -xzf zeek-${ZEEK_VERSION}.tar.gz \
    && cd zeek-${ZEEK_VERSION} \
    && ./configure --prefix=/opt/zeek \
    && make \
    && make install \
    && cd .. \
    && rm -rf zeek-${ZEEK_VERSION} zeek-${ZEEK_VERSION}.tar.gz

# Install Zeek plugins with optimized cloning and building
WORKDIR /tmp/plugins

# Clone all plugins in parallel with shallow clones
RUN git clone --depth 1 --single-branch https://github.com/zeek/zeek-plugin-arp.git \
    && git clone --depth 1 --single-branch https://github.com/zeek/zeek-plugin-dhcp.git \
    && git clone --depth 1 --single-branch https://github.com/zeek/zeek-plugin-mdns.git \
    && git clone --depth 1 --single-branch https://github.com/zeek/zeek-plugin-netbios.git \
    && git clone --depth 1 --single-branch https://github.com/zeek/zeek-plugin-llmnr.git \
    && git clone --depth 1 --single-branch https://github.com/zeek/zeek-plugin-ntp.git \
    && git clone --depth 1 --single-branch https://github.com/zeek/zeek-plugin-snmp.git

# Build all plugins in parallel using a script
COPY <<EOF /tmp/build_plugins.sh
#!/bin/bash
set -e

build_plugin() {
    local plugin=\$1
    echo "Building \$plugin..."
    cd /tmp/plugins/\$plugin
    /opt/zeek/bin/zeek -N zeek-plugin-\$plugin
    /opt/zeek/bin/zeek -N zeek-plugin-\$plugin -b .
    echo "Built \$plugin"
}

# Build plugins in parallel
build_plugin arp &
build_plugin dhcp &
build_plugin mdns &
build_plugin netbios &
build_plugin llmnr &
build_plugin ntp &
build_plugin snmp &

# Wait for all builds to complete
wait
echo "All plugins built successfully"
EOF

RUN chmod +x /tmp/build_plugins.sh && /tmp/build_plugins.sh

# Final stage - minimal runtime image
FROM ubuntu:22.04 AS runtime

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PATH="/opt/zeek/bin:${PATH}"
ENV ZEEKPATH="/opt/zeek/share/zeek:/opt/zeek/share/zeek/policy:/opt/zeek/share/zeek/site"

# Install only runtime dependencies
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && apt-get install -y --no-install-recommends \
    libpcap0.8 \
    libssl3 \
    python3 \
    python3-pip \
    libmaxminddb0 \
    libcurl4 \
    libgeoip1 \
    libnetfilter-queue1 \
    libnfnetlink0 \
    libpcre3 \
    libsnappy1v5 \
    libzstd1 \
    libbz2-1.0 \
    liblz4-1 \
    libjemalloc2 \
    libunwind8 \
    libgoogle-perftools4 \
    ca-certificates \
    wget \
    curl \
    tcpdump \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create zeek user and setup directories
RUN useradd -m -s /bin/bash zeek \
    && mkdir -p /opt/zeek/logs /opt/zeek/spool /opt/zeek/etc

# Copy Zeek installation and plugins from builder
COPY --from=builder /opt/zeek /opt/zeek
COPY --from=builder /tmp/plugins/*/build /opt/zeek/lib/zeek/plugins/

# Set ownership
RUN chown -R zeek:zeek /opt/zeek

# Copy configuration files
COPY zeek-config.zeek /opt/zeek/etc/zeek-config.zeek
COPY local.zeek /opt/zeek/share/zeek/site/local.zeek
COPY entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# Switch to zeek user
USER zeek

# Expose ports for various protocols
EXPOSE 53/udp 67/udp 68/udp 123/udp 161/udp 162/udp 5353/udp 137/udp 138/udp 139/tcp 445/tcp

# Set working directory
WORKDIR /opt/zeek

# Default command
ENTRYPOINT ["/entrypoint.sh"]
CMD ["zeek", "-i", "eth0", "-C"] 